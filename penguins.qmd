---
title: "Shiny Example"
format: html
server: shiny
# execute:
#   echo: true
---

```{python}
#| context: setup

import pandas as pd
from palmerpenguins import load_penguins
import seaborn as sns

penguins = load_penguins()

species = penguins["species"].unique().tolist()
numeric_cols = penguins.select_dtypes(include=["float64"]).columns.tolist()
```

```{python}
#| context: setup
# Colors
import matplotlib.colors as mpl_colors
import seaborn as sns  # type: ignore

# "darkorange", "purple", "cyan4"
colors = [[255, 140, 0], [160, 32, 240], [0, 139, 139]]
colors = [(r / 255.0, g / 255.0, b / 255.0) for r, g, b in colors]

palette: dict[str, tuple[float, float, float]] = {
    "Adelie": colors[0],
    "Chinstrap": colors[1],
    "Gentoo": colors[2],
    "default": sns.color_palette()[0],  # type: ignore
}

bg_palette = {}
# bgcols: list[str] = sns.color_palette().as_hex()
# Use `sns.set_style("whitegrid")` to help find approx alpha value
for name, col in palette.items():
    # Adjusted n_colors until `axe` accessibility did not complain about color contrast
    bg_palette[name] = mpl_colors.to_hex(sns.light_palette(col, n_colors=7)[1])  # type: ignore
```

```{python}
from shiny import render, reactive, ui, req
import matplotlib.pyplot as plt
import numpy as np

ui.input_selectize(
    "xvar",
    "X variable",
    numeric_cols,
    selected=numeric_cols[0],
)

ui.input_selectize(
    "yvar",
    "Y variable",
    numeric_cols,
    selected=numeric_cols[1],
)

ui.input_checkbox_group(
    "species", "Filter by species", choices=species, selected=species
)

ui.input_switch("by_species", "Show species", value=True)

ui.input_switch("show_margins", "Show marginal plots", value=True)
```

```{python}
@reactive.Calc
def filtered_df() -> pd.DataFrame:
    """Returns a Pandas data frame that includes only the desired rows"""

    # This calculation "req"uires that at least one species is selected
    req(len(input.species()) > 0)

    # Filter the rows so we only include the desired species
    return penguins[penguins["species"].isin(input.species())]

@output
@render.plot
def scatter():
    """Generates a plot for Shiny to display to the user"""

    # The plotting function to use depends on whether margins are desired
    plotfunc = sns.jointplot if input.show_margins() else sns.scatterplot

    plotfunc(
        data=filtered_df(),
        x=input.xvar(),
        y=input.yvar(),
        palette=palette,
        hue="species" if input.by_species() else None,
        hue_order=species,
        legend=False,
    )
```
